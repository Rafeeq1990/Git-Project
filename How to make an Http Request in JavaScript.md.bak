# How do I make an HTTP request in Javascript?

To make an HTTP request in JavaScript, you can use the built-in **XMLHttpRequest** object or the newer **fetch** API. Here's an example of how to use both methods:

1. Using XMLHttpRequest:

```JavaScript
var xhr = new XMLHttpRequest();
xhr.open('GET', 'https://api.example.com/data', true);

// Optional: Set headers if needed
xhr.setRequestHeader('Content-Type', 'application/json');
xhr.setRequestHeader('Authorization', 'Bearer YOUR_ACCESS_TOKEN');

xhr.onreadystatechange = function() {
  if (xhr.readyState === 4 && xhr.status === 200) {
    var response = JSON.parse(xhr.responseText);
    // Process the response data
    console.log(response);
  }
};

xhr.send();
```

2. Using fetch:

```JavaScript

fetch('https://api.example.com/data', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer YOUR_ACCESS_TOKEN'
  }
})
  .then(function(response) {
    if (response.ok) {
      return response.json();
    }
    throw new Error('Network response was not ok.');
  })
  .then(function(data) {
    // Process the response data
    console.log(data);
  })
  .catch(function(error) {
    // Handle any errors
    console.error('Error:', error);
  });
```


In both cases, you specify the URL of the server you want to make the request to. If you need to send additional data or parameters, you can include them in the request body (for **POST or PUT requests**) or as query parameters in the URL.

Note that in the fetch example, the response is first checked using response.ok to ensure that the request was successful. You can modify the code to handle different response statuses as needed.

Choose the method that best suits your needs and the browser compatibility requirements of your project. fetch is newer and more modern, but **_XMLHttpRequest_** is supported in older browsers.